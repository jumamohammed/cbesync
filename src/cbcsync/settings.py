"""
Django settings for cbcsync project.

Generated by 'django-admin startproject' using Django 5.0.14.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from decouple import config
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#django logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'INFO',  # Log INFO level messages
            'class': 'logging.StreamHandler',
            'formatter': 'detailed',
        },
    },
    'formatters': {
        'detailed': {
            'format': '{levelname} {asctime} {message}',
            'style': '{',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',  # Capture info-level logs
            'propagate': True,
        },
        # Log file access details
        'accounts.middleware': {
            'handlers': ['console'],
            'level': 'INFO',  # Capture info-level logs for this app
            'propagate': False,
        },
        #accounts.view to log hompage visits
        'accounts.views':{
            'handlers':['console'],
            'level':'INFO',
            'propagate':False,
        }
    },
}



# Default email config
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config('EMAIL_HOST', cast=str, default="smtp.gmail.com")
EMAIL_PORT = config('EMAIL_PORT', cast=int, default=587)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool, default=True)  # use port 587
EMAIL_USE_SSL = config('EMAIL_USE_SSL', cast=bool, default=False)  # use port 465
EMAIL_HOST_USER = config('EMAIL_HOST_USER', cast=str, default=None)
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', cast=str, default=None)

# Parse admin list from env (e.g. "Name:email,Name2:email2")
ADMINS_ARRAY = config("ADMINS", default="")
ADMINS = []

for pair in ADMINS_ARRAY.split(","):
    if ":" in pair:
        name, email = pair.split(":", 1)
        ADMINS.append((name.strip(), email.strip()))

MANAGERS = ADMINS


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("DJANGO_SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = str(os.environ.get("DJANGO_DEBUG")).lower() == "true"
DEBUG = config("DJANGO_DEBUG",cast=bool,default=True)

ALLOWED_HOSTS = [
    ".railway.app",
    ".onrender.com" #sample https://saas.railway.app
]
if DEBUG:
    ALLOWED_HOSTS += [
        "127.0.0.1",
        "localhost",
    ]
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost', 'http://127.0.0.1',  # local host management
    ]
if not DEBUG:
    #csrf forms setup to avoid csrf token erros
    CSRF_TRUSTED_ORIGINS = [
        'https://cbcsync-production.up.railway.app',
        'https://cbcsync.onrender.com',  # or your custom domain if any
    ]
    # Ensure cookies are only sent over HTTPS
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True

    # Prevent client-side JS access to cookies
    CSRF_COOKIE_HTTPONLY = True
    SESSION_COOKIE_HTTPONLY = True

    # Optional but helps with modern browsers
    CSRF_COOKIE_SAMESITE = 'Lax'
    SESSION_COOKIE_SAMESITE = 'Lax'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #my apps for the project
    'accounts',
    'assessments',
    'courses',
    'materials',
    'schools',
    'comms',
    'classes',
    'teachers',
    'students',
    'parents',
    'clubs',
    'subjects',
    'results',
    'exams',
    'cats',
    'projects',
    #management apps
    'commando',
    #thirdparty apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'axes', #for login security
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', #comment out when on cdn 
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    "allauth.account.middleware.AccountMiddleware", #django allauth
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    #ip middleware custom for security
    'accounts.middleware.LogUserIPAddressMiddleware',
    #axes to format lockout messages and render lockout responses
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'cbcsync.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'cbcsync.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

CONN_MAX_AGE = config("CONN_MAX_AGE", cast=int, default=30)
DATABASE_URL = config("DATABASE_URL", default = None)
if DATABASE_URL is not None:
    import dj_database_url
    DATABASES = {
    "default": dj_database_url.config(
        default=DATABASE_URL,
        conn_max_age=30,
        conn_health_checks=True,
        )
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
#Django all auth config
LOGIN_REDIRECT_URL = 'home_redirect'
ACCOUNT_LOGIN_METHODS={'email'}
ACCOUNT_SIGNUP_FIELDS={'email*', 'password1*', 'password2*',}
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = True #capture max attempts later on
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_MAX_ATTEMPTS = 3 # give 3 max code attempts
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_TIMEOUT = 600 #10 minutes timeout for verification
ACCOUNT_REAUTHENTICATION_REQUIRED = True # for sensitive reauths e.g email change/password
ACCOUNT_EMAIL_SUBJECT_PREFIX = ['CbeSync']
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1  # Link expires after 1 day
#django axes for brute force protection
AXES_LOCKOUT_PARAMETERS = ["ip_address"]
AXES_COOLOFF_TIME = 2 #number of hours before the locked out user can login
AXES_LOCKOUT_TEMPLATE = 'sync_apps/accounts/lockout.html'
AXES_IP_BLACKLIST = [] #Instant / permanent lockout from access
AXES_ENABLE_ACCESS_FAILURE_LOG = True #Every fail attempt to signin is logged

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend',
    
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
    
]
SITE_ID = 1

# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {}
ACCOUNT_FORMS = {
    'signup': 'accounts.forms.CustomSignupForm',
}
AUTH_USER_MODEL = 'accounts.CustomUser' #for avoiding default auth config

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
# STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' #comment out when on cdn
STORAGES = {
    # ...
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}


#django static files config, url, location dir, app preload dest
STATIC_URL = 'static/'
STATICFILES_BASE_DIR = BASE_DIR / "static"
STATICFILES_BASE_DIR.mkdir(exist_ok=True, parents=True)
STATICFILES_VENDOR_DIR = BASE_DIR / "vendors"

#sources for python manage.py collect static
STATICFILES_DIRS = [
    STATICFILES_BASE_DIR,
    STATICFILES_VENDOR_DIR,
]

# #output for python manage.py collect static
# #local cdn -> prod cdn in future
#STATIC_ROOT = BASE_DIR / "staticfiles"
STATIC_ROOT = BASE_DIR.parent / "local-cdn"
if not DEBUG:
    STATIC_ROOT = BASE_DIR / "prod-cdn"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
